#define P pair<int, string>

struct compare {
    bool operator()(const P& p, const P& q) {
        return (p.first < q.first) || (p.first == q.first && p.second > q.second);
    }
};

class Solution {
public:
    vector<string> topKFrequent(vector<string>& words, int k) {
        unordered_map <string, int> m;
        for (auto word : words) {
            m[word] += 1;
        }
        priority_queue <P, vector<P>, compare> pq;
        for (auto it = m.begin(); it != m.end(); it++) {
            pq.push({it->second, it->first});
        }
        vector <string> ans;
        
        while (k--) {
            ans.push_back(pq.top().second);
            pq.pop();
        }
        
        return ans;
    }
};
