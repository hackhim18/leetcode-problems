class Solution {
public:
   int networkDelayTime(vector<vector<int>>& times, int N, int K) {
        unordered_map<int,vector<pair<int,int>>> graph;
        for(int i=0;i<times.size();i++)
            graph[times[i][0]].push_back({times[i][1],times[i][2]});
        auto cmp=[](const pair<int,int> &a,const pair<int,int> &b)
        {
            return a.second>b.second;
        };
        priority_queue<pair<int,int>,vector<pair<int,int>>,decltype(cmp)> pq(cmp);
        pq.push({K,0});
        int ans,count=0;
        vector<bool> vis(N+1,false);
        while(!pq.empty() &&count!=N)
        {
            pair<int,int> p=pq.top();
            pq.pop();
            if(vis[p.first]==false)count++;
            vis[p.first]=true;
            ans=p.second;
            if(graph.count(p.first))
            {
                for(auto &x:graph[p.first])
                {
                    if(!vis[x.first])
                        pq.push({x.first,x.second+p.second});
                }
            }
        }
        return count==N?ans:-1;
    }
};
